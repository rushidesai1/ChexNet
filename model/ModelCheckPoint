# pytorch imports
import torch
import ChexDataset as CXR
import torchvision
from torchvision import transforms
from torchvision import transforms, utils


def load_data(
        PATH_TO_IMAGES,
        PATH_TO_LABELS,
        LABEL,
        PATH_TO_MODEL,
        POSITIVE_LABELS_ONLY,
        STARTER_IMAGES):
    """
    Loads dataloader and torchvision model
    Args:
        PATH_TO_IMAGES: path to NIH CXR images
        LABEL: label of interest (must exactly match one of LABELS defined below or will get error)
        PATH_TO_MODEL: path to downloaded pretrained model or your own retrained model
        POSITIVE_LABELS_ONLY: dataloader will show only examples + for LABEL pathology if True, otherwise shows positive
                                and negative examples if false
    Returns:
        dataloader: dataloader with test examples to show
        model: fine tuned torchvision densenet-121
    """

    checkpoint = torch.load(PATH_TO_MODEL, map_location=lambda storage, loc: storage)
    model = checkpoint['model']
    del checkpoint
    model.cpu()

    # build dataloader on test
    mean = [0.485, 0.456, 0.406]  # Imagenet mean and std
    std = [0.229, 0.224, 0.225]

    LABELS = [
        'Atelectasis',
        'Cardiomegaly',
        'Effusion',
        'Infiltration',
        'Mass',
        'Nodule',
        'Pneumonia',
        'Pneumothorax',
        'Consolidation',
        'Edema',
        'Emphysema',
        'Fibrosis',
        'Pleural_Thickening',
        'Hernia']

    data_transform = transforms.Compose([
        transforms.Scale(224),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean, std)
    ])

    if not POSITIVE_LABELS_ONLY:
        label = "any"
    else:
        label = LABEL

    dataset = CXR.ChexDataset(
        path_to_images=PATH_TO_IMAGES,
        path_to_labels_csv=PATH_TO_LABELS,
        fold='test',
        transform=data_transform,
        label=label,
        # starter_images=STARTER_IMAGES
    )

    dataloader = torch.utils.data.DataLoader(dataset, batch_size=1, shuffle=False, num_workers=1)

    return iter(dataloader), model
